//The ranker module
//This module is used to rank the spectral match socre generated by XY-Meta
package ranker

import (
	"dataframe"
	"sort"
)

func Matchrank(Grades dataframe.LinkList, match_model int) dataframe.Grade {
	var Score []float64
	if match_model == 1 {
		for i := 0; i < Grades.GetLength(); i++ {
			Score = append(Score, Grades.Search(i).(dataframe.Grade).Score)
		}
		Max_index := len(Score) - 1
		sort.Float64s(Score)
		for i := 0; i < Grades.GetLength(); i++ {
			if Grades.Search(i).(dataframe.Grade).Score == Score[Max_index] {
				return Grades.Search(i).(dataframe.Grade)
			}
		}
	} else if match_model == 2 {
		for i := 0; i < Grades.GetLength(); i++ {
			Score = append(Score, Grades.Search(i).(dataframe.Grade).Cosine_similar)
		}
		Max_index := len(Score) - 1
		sort.Float64s(Score)
		for i := 0; i < Grades.GetLength(); i++ {
			if Grades.Search(i).(dataframe.Grade).Cosine_similar == Score[Max_index] {
				return Grades.Search(i).(dataframe.Grade)
			}
		}
	}
	return Grades.Search(0).(dataframe.Grade)
}

func Halfrank(Grades dataframe.LinkList) dataframe.LinkList {
	var Score []float64
	var temp_list dataframe.LinkList
	for i := 0; i < Grades.GetLength(); i++ {
		Score = append(Score, Grades.Search(i).(dataframe.Grade).Score)
	}
	sort.Float64s(Score)
	for j := len(Score) - 1; j > 0; j-- {
		for i := 0; i < Grades.GetLength(); i++ {
			if Grades.Search(i).(dataframe.Grade).Score == Score[j] {
				temp_list.Append(Grades.Search(i).(dataframe.Grade))
				if temp_list.GetLength() == 10 {
					break
				}
			}
		}
		if temp_list.GetLength() == 10 {
			break
		}
	}
	return temp_list
}
